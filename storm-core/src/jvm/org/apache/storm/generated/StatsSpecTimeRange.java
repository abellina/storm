/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.storm.generated;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class StatsSpecTimeRange implements org.apache.thrift.TBase<StatsSpecTimeRange, StatsSpecTimeRange._Fields>, java.io.Serializable, Cloneable, Comparable<StatsSpecTimeRange> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StatsSpecTimeRange");

  private static final org.apache.thrift.protocol.TField OP_FIELD_DESC = new org.apache.thrift.protocol.TField("op", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TOPOLOGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topology_id", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField METRICS_FIELD_DESC = new org.apache.thrift.protocol.TField("metrics", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField START_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("start_times", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField END_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("end_times", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField MIN_AGG_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("min_agg_level", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StatsSpecTimeRangeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StatsSpecTimeRangeTupleSchemeFactory());
  }

  private StatsStoreOperation op; // optional
  private String topology_id; // optional
  private List<String> metrics; // optional
  private List<Long> start_times; // optional
  private List<Long> end_times; // optional
  private AggLevel min_agg_level; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see StatsStoreOperation
     */
    OP((short)1, "op"),
    TOPOLOGY_ID((short)2, "topology_id"),
    METRICS((short)3, "metrics"),
    START_TIMES((short)4, "start_times"),
    END_TIMES((short)5, "end_times"),
    /**
     * 
     * @see AggLevel
     */
    MIN_AGG_LEVEL((short)6, "min_agg_level");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OP
          return OP;
        case 2: // TOPOLOGY_ID
          return TOPOLOGY_ID;
        case 3: // METRICS
          return METRICS;
        case 4: // START_TIMES
          return START_TIMES;
        case 5: // END_TIMES
          return END_TIMES;
        case 6: // MIN_AGG_LEVEL
          return MIN_AGG_LEVEL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.OP,_Fields.TOPOLOGY_ID,_Fields.METRICS,_Fields.START_TIMES,_Fields.END_TIMES,_Fields.MIN_AGG_LEVEL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OP, new org.apache.thrift.meta_data.FieldMetaData("op", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, StatsStoreOperation.class)));
    tmpMap.put(_Fields.TOPOLOGY_ID, new org.apache.thrift.meta_data.FieldMetaData("topology_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METRICS, new org.apache.thrift.meta_data.FieldMetaData("metrics", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.START_TIMES, new org.apache.thrift.meta_data.FieldMetaData("start_times", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.END_TIMES, new org.apache.thrift.meta_data.FieldMetaData("end_times", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.MIN_AGG_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("min_agg_level", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AggLevel.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StatsSpecTimeRange.class, metaDataMap);
  }

  public StatsSpecTimeRange() {
    this.op = org.apache.storm.generated.StatsStoreOperation.SUM;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StatsSpecTimeRange(StatsSpecTimeRange other) {
    if (other.is_set_op()) {
      this.op = other.op;
    }
    if (other.is_set_topology_id()) {
      this.topology_id = other.topology_id;
    }
    if (other.is_set_metrics()) {
      List<String> __this__metrics = new ArrayList<String>(other.metrics);
      this.metrics = __this__metrics;
    }
    if (other.is_set_start_times()) {
      List<Long> __this__start_times = new ArrayList<Long>(other.start_times);
      this.start_times = __this__start_times;
    }
    if (other.is_set_end_times()) {
      List<Long> __this__end_times = new ArrayList<Long>(other.end_times);
      this.end_times = __this__end_times;
    }
    if (other.is_set_min_agg_level()) {
      this.min_agg_level = other.min_agg_level;
    }
  }

  public StatsSpecTimeRange deepCopy() {
    return new StatsSpecTimeRange(this);
  }

  @Override
  public void clear() {
    this.op = org.apache.storm.generated.StatsStoreOperation.SUM;

    this.topology_id = null;
    this.metrics = null;
    this.start_times = null;
    this.end_times = null;
    this.min_agg_level = null;
  }

  /**
   * 
   * @see StatsStoreOperation
   */
  public StatsStoreOperation get_op() {
    return this.op;
  }

  /**
   * 
   * @see StatsStoreOperation
   */
  public void set_op(StatsStoreOperation op) {
    this.op = op;
  }

  public void unset_op() {
    this.op = null;
  }

  /** Returns true if field op is set (has been assigned a value) and false otherwise */
  public boolean is_set_op() {
    return this.op != null;
  }

  public void set_op_isSet(boolean value) {
    if (!value) {
      this.op = null;
    }
  }

  public String get_topology_id() {
    return this.topology_id;
  }

  public void set_topology_id(String topology_id) {
    this.topology_id = topology_id;
  }

  public void unset_topology_id() {
    this.topology_id = null;
  }

  /** Returns true if field topology_id is set (has been assigned a value) and false otherwise */
  public boolean is_set_topology_id() {
    return this.topology_id != null;
  }

  public void set_topology_id_isSet(boolean value) {
    if (!value) {
      this.topology_id = null;
    }
  }

  public int get_metrics_size() {
    return (this.metrics == null) ? 0 : this.metrics.size();
  }

  public java.util.Iterator<String> get_metrics_iterator() {
    return (this.metrics == null) ? null : this.metrics.iterator();
  }

  public void add_to_metrics(String elem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<String>();
    }
    this.metrics.add(elem);
  }

  public List<String> get_metrics() {
    return this.metrics;
  }

  public void set_metrics(List<String> metrics) {
    this.metrics = metrics;
  }

  public void unset_metrics() {
    this.metrics = null;
  }

  /** Returns true if field metrics is set (has been assigned a value) and false otherwise */
  public boolean is_set_metrics() {
    return this.metrics != null;
  }

  public void set_metrics_isSet(boolean value) {
    if (!value) {
      this.metrics = null;
    }
  }

  public int get_start_times_size() {
    return (this.start_times == null) ? 0 : this.start_times.size();
  }

  public java.util.Iterator<Long> get_start_times_iterator() {
    return (this.start_times == null) ? null : this.start_times.iterator();
  }

  public void add_to_start_times(long elem) {
    if (this.start_times == null) {
      this.start_times = new ArrayList<Long>();
    }
    this.start_times.add(elem);
  }

  public List<Long> get_start_times() {
    return this.start_times;
  }

  public void set_start_times(List<Long> start_times) {
    this.start_times = start_times;
  }

  public void unset_start_times() {
    this.start_times = null;
  }

  /** Returns true if field start_times is set (has been assigned a value) and false otherwise */
  public boolean is_set_start_times() {
    return this.start_times != null;
  }

  public void set_start_times_isSet(boolean value) {
    if (!value) {
      this.start_times = null;
    }
  }

  public int get_end_times_size() {
    return (this.end_times == null) ? 0 : this.end_times.size();
  }

  public java.util.Iterator<Long> get_end_times_iterator() {
    return (this.end_times == null) ? null : this.end_times.iterator();
  }

  public void add_to_end_times(long elem) {
    if (this.end_times == null) {
      this.end_times = new ArrayList<Long>();
    }
    this.end_times.add(elem);
  }

  public List<Long> get_end_times() {
    return this.end_times;
  }

  public void set_end_times(List<Long> end_times) {
    this.end_times = end_times;
  }

  public void unset_end_times() {
    this.end_times = null;
  }

  /** Returns true if field end_times is set (has been assigned a value) and false otherwise */
  public boolean is_set_end_times() {
    return this.end_times != null;
  }

  public void set_end_times_isSet(boolean value) {
    if (!value) {
      this.end_times = null;
    }
  }

  /**
   * 
   * @see AggLevel
   */
  public AggLevel get_min_agg_level() {
    return this.min_agg_level;
  }

  /**
   * 
   * @see AggLevel
   */
  public void set_min_agg_level(AggLevel min_agg_level) {
    this.min_agg_level = min_agg_level;
  }

  public void unset_min_agg_level() {
    this.min_agg_level = null;
  }

  /** Returns true if field min_agg_level is set (has been assigned a value) and false otherwise */
  public boolean is_set_min_agg_level() {
    return this.min_agg_level != null;
  }

  public void set_min_agg_level_isSet(boolean value) {
    if (!value) {
      this.min_agg_level = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OP:
      if (value == null) {
        unset_op();
      } else {
        set_op((StatsStoreOperation)value);
      }
      break;

    case TOPOLOGY_ID:
      if (value == null) {
        unset_topology_id();
      } else {
        set_topology_id((String)value);
      }
      break;

    case METRICS:
      if (value == null) {
        unset_metrics();
      } else {
        set_metrics((List<String>)value);
      }
      break;

    case START_TIMES:
      if (value == null) {
        unset_start_times();
      } else {
        set_start_times((List<Long>)value);
      }
      break;

    case END_TIMES:
      if (value == null) {
        unset_end_times();
      } else {
        set_end_times((List<Long>)value);
      }
      break;

    case MIN_AGG_LEVEL:
      if (value == null) {
        unset_min_agg_level();
      } else {
        set_min_agg_level((AggLevel)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OP:
      return get_op();

    case TOPOLOGY_ID:
      return get_topology_id();

    case METRICS:
      return get_metrics();

    case START_TIMES:
      return get_start_times();

    case END_TIMES:
      return get_end_times();

    case MIN_AGG_LEVEL:
      return get_min_agg_level();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OP:
      return is_set_op();
    case TOPOLOGY_ID:
      return is_set_topology_id();
    case METRICS:
      return is_set_metrics();
    case START_TIMES:
      return is_set_start_times();
    case END_TIMES:
      return is_set_end_times();
    case MIN_AGG_LEVEL:
      return is_set_min_agg_level();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StatsSpecTimeRange)
      return this.equals((StatsSpecTimeRange)that);
    return false;
  }

  public boolean equals(StatsSpecTimeRange that) {
    if (that == null)
      return false;

    boolean this_present_op = true && this.is_set_op();
    boolean that_present_op = true && that.is_set_op();
    if (this_present_op || that_present_op) {
      if (!(this_present_op && that_present_op))
        return false;
      if (!this.op.equals(that.op))
        return false;
    }

    boolean this_present_topology_id = true && this.is_set_topology_id();
    boolean that_present_topology_id = true && that.is_set_topology_id();
    if (this_present_topology_id || that_present_topology_id) {
      if (!(this_present_topology_id && that_present_topology_id))
        return false;
      if (!this.topology_id.equals(that.topology_id))
        return false;
    }

    boolean this_present_metrics = true && this.is_set_metrics();
    boolean that_present_metrics = true && that.is_set_metrics();
    if (this_present_metrics || that_present_metrics) {
      if (!(this_present_metrics && that_present_metrics))
        return false;
      if (!this.metrics.equals(that.metrics))
        return false;
    }

    boolean this_present_start_times = true && this.is_set_start_times();
    boolean that_present_start_times = true && that.is_set_start_times();
    if (this_present_start_times || that_present_start_times) {
      if (!(this_present_start_times && that_present_start_times))
        return false;
      if (!this.start_times.equals(that.start_times))
        return false;
    }

    boolean this_present_end_times = true && this.is_set_end_times();
    boolean that_present_end_times = true && that.is_set_end_times();
    if (this_present_end_times || that_present_end_times) {
      if (!(this_present_end_times && that_present_end_times))
        return false;
      if (!this.end_times.equals(that.end_times))
        return false;
    }

    boolean this_present_min_agg_level = true && this.is_set_min_agg_level();
    boolean that_present_min_agg_level = true && that.is_set_min_agg_level();
    if (this_present_min_agg_level || that_present_min_agg_level) {
      if (!(this_present_min_agg_level && that_present_min_agg_level))
        return false;
      if (!this.min_agg_level.equals(that.min_agg_level))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_op = true && (is_set_op());
    list.add(present_op);
    if (present_op)
      list.add(op.getValue());

    boolean present_topology_id = true && (is_set_topology_id());
    list.add(present_topology_id);
    if (present_topology_id)
      list.add(topology_id);

    boolean present_metrics = true && (is_set_metrics());
    list.add(present_metrics);
    if (present_metrics)
      list.add(metrics);

    boolean present_start_times = true && (is_set_start_times());
    list.add(present_start_times);
    if (present_start_times)
      list.add(start_times);

    boolean present_end_times = true && (is_set_end_times());
    list.add(present_end_times);
    if (present_end_times)
      list.add(end_times);

    boolean present_min_agg_level = true && (is_set_min_agg_level());
    list.add(present_min_agg_level);
    if (present_min_agg_level)
      list.add(min_agg_level.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(StatsSpecTimeRange other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_op()).compareTo(other.is_set_op());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_op()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.op, other.op);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_topology_id()).compareTo(other.is_set_topology_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_topology_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topology_id, other.topology_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_metrics()).compareTo(other.is_set_metrics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_metrics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metrics, other.metrics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_start_times()).compareTo(other.is_set_start_times());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_start_times()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_times, other.start_times);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_end_times()).compareTo(other.is_set_end_times());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_end_times()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_times, other.end_times);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_min_agg_level()).compareTo(other.is_set_min_agg_level());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_min_agg_level()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_agg_level, other.min_agg_level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StatsSpecTimeRange(");
    boolean first = true;

    if (is_set_op()) {
      sb.append("op:");
      if (this.op == null) {
        sb.append("null");
      } else {
        sb.append(this.op);
      }
      first = false;
    }
    if (is_set_topology_id()) {
      if (!first) sb.append(", ");
      sb.append("topology_id:");
      if (this.topology_id == null) {
        sb.append("null");
      } else {
        sb.append(this.topology_id);
      }
      first = false;
    }
    if (is_set_metrics()) {
      if (!first) sb.append(", ");
      sb.append("metrics:");
      if (this.metrics == null) {
        sb.append("null");
      } else {
        sb.append(this.metrics);
      }
      first = false;
    }
    if (is_set_start_times()) {
      if (!first) sb.append(", ");
      sb.append("start_times:");
      if (this.start_times == null) {
        sb.append("null");
      } else {
        sb.append(this.start_times);
      }
      first = false;
    }
    if (is_set_end_times()) {
      if (!first) sb.append(", ");
      sb.append("end_times:");
      if (this.end_times == null) {
        sb.append("null");
      } else {
        sb.append(this.end_times);
      }
      first = false;
    }
    if (is_set_min_agg_level()) {
      if (!first) sb.append(", ");
      sb.append("min_agg_level:");
      if (this.min_agg_level == null) {
        sb.append("null");
      } else {
        sb.append(this.min_agg_level);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StatsSpecTimeRangeStandardSchemeFactory implements SchemeFactory {
    public StatsSpecTimeRangeStandardScheme getScheme() {
      return new StatsSpecTimeRangeStandardScheme();
    }
  }

  private static class StatsSpecTimeRangeStandardScheme extends StandardScheme<StatsSpecTimeRange> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StatsSpecTimeRange struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.op = org.apache.storm.generated.StatsStoreOperation.findByValue(iprot.readI32());
              struct.set_op_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOPOLOGY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.topology_id = iprot.readString();
              struct.set_topology_id_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // METRICS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list846 = iprot.readListBegin();
                struct.metrics = new ArrayList<String>(_list846.size);
                String _elem847;
                for (int _i848 = 0; _i848 < _list846.size; ++_i848)
                {
                  _elem847 = iprot.readString();
                  struct.metrics.add(_elem847);
                }
                iprot.readListEnd();
              }
              struct.set_metrics_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // START_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list849 = iprot.readListBegin();
                struct.start_times = new ArrayList<Long>(_list849.size);
                long _elem850;
                for (int _i851 = 0; _i851 < _list849.size; ++_i851)
                {
                  _elem850 = iprot.readI64();
                  struct.start_times.add(_elem850);
                }
                iprot.readListEnd();
              }
              struct.set_start_times_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // END_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list852 = iprot.readListBegin();
                struct.end_times = new ArrayList<Long>(_list852.size);
                long _elem853;
                for (int _i854 = 0; _i854 < _list852.size; ++_i854)
                {
                  _elem853 = iprot.readI64();
                  struct.end_times.add(_elem853);
                }
                iprot.readListEnd();
              }
              struct.set_end_times_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MIN_AGG_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.min_agg_level = org.apache.storm.generated.AggLevel.findByValue(iprot.readI32());
              struct.set_min_agg_level_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StatsSpecTimeRange struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.op != null) {
        if (struct.is_set_op()) {
          oprot.writeFieldBegin(OP_FIELD_DESC);
          oprot.writeI32(struct.op.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.topology_id != null) {
        if (struct.is_set_topology_id()) {
          oprot.writeFieldBegin(TOPOLOGY_ID_FIELD_DESC);
          oprot.writeString(struct.topology_id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.metrics != null) {
        if (struct.is_set_metrics()) {
          oprot.writeFieldBegin(METRICS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.metrics.size()));
            for (String _iter855 : struct.metrics)
            {
              oprot.writeString(_iter855);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.start_times != null) {
        if (struct.is_set_start_times()) {
          oprot.writeFieldBegin(START_TIMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.start_times.size()));
            for (long _iter856 : struct.start_times)
            {
              oprot.writeI64(_iter856);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.end_times != null) {
        if (struct.is_set_end_times()) {
          oprot.writeFieldBegin(END_TIMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.end_times.size()));
            for (long _iter857 : struct.end_times)
            {
              oprot.writeI64(_iter857);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.min_agg_level != null) {
        if (struct.is_set_min_agg_level()) {
          oprot.writeFieldBegin(MIN_AGG_LEVEL_FIELD_DESC);
          oprot.writeI32(struct.min_agg_level.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StatsSpecTimeRangeTupleSchemeFactory implements SchemeFactory {
    public StatsSpecTimeRangeTupleScheme getScheme() {
      return new StatsSpecTimeRangeTupleScheme();
    }
  }

  private static class StatsSpecTimeRangeTupleScheme extends TupleScheme<StatsSpecTimeRange> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StatsSpecTimeRange struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.is_set_op()) {
        optionals.set(0);
      }
      if (struct.is_set_topology_id()) {
        optionals.set(1);
      }
      if (struct.is_set_metrics()) {
        optionals.set(2);
      }
      if (struct.is_set_start_times()) {
        optionals.set(3);
      }
      if (struct.is_set_end_times()) {
        optionals.set(4);
      }
      if (struct.is_set_min_agg_level()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.is_set_op()) {
        oprot.writeI32(struct.op.getValue());
      }
      if (struct.is_set_topology_id()) {
        oprot.writeString(struct.topology_id);
      }
      if (struct.is_set_metrics()) {
        {
          oprot.writeI32(struct.metrics.size());
          for (String _iter858 : struct.metrics)
          {
            oprot.writeString(_iter858);
          }
        }
      }
      if (struct.is_set_start_times()) {
        {
          oprot.writeI32(struct.start_times.size());
          for (long _iter859 : struct.start_times)
          {
            oprot.writeI64(_iter859);
          }
        }
      }
      if (struct.is_set_end_times()) {
        {
          oprot.writeI32(struct.end_times.size());
          for (long _iter860 : struct.end_times)
          {
            oprot.writeI64(_iter860);
          }
        }
      }
      if (struct.is_set_min_agg_level()) {
        oprot.writeI32(struct.min_agg_level.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StatsSpecTimeRange struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.op = org.apache.storm.generated.StatsStoreOperation.findByValue(iprot.readI32());
        struct.set_op_isSet(true);
      }
      if (incoming.get(1)) {
        struct.topology_id = iprot.readString();
        struct.set_topology_id_isSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list861 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.metrics = new ArrayList<String>(_list861.size);
          String _elem862;
          for (int _i863 = 0; _i863 < _list861.size; ++_i863)
          {
            _elem862 = iprot.readString();
            struct.metrics.add(_elem862);
          }
        }
        struct.set_metrics_isSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list864 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.start_times = new ArrayList<Long>(_list864.size);
          long _elem865;
          for (int _i866 = 0; _i866 < _list864.size; ++_i866)
          {
            _elem865 = iprot.readI64();
            struct.start_times.add(_elem865);
          }
        }
        struct.set_start_times_isSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list867 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.end_times = new ArrayList<Long>(_list867.size);
          long _elem868;
          for (int _i869 = 0; _i869 < _list867.size; ++_i869)
          {
            _elem868 = iprot.readI64();
            struct.end_times.add(_elem868);
          }
        }
        struct.set_end_times_isSet(true);
      }
      if (incoming.get(5)) {
        struct.min_agg_level = org.apache.storm.generated.AggLevel.findByValue(iprot.readI32());
        struct.set_min_agg_level_isSet(true);
      }
    }
  }

}

