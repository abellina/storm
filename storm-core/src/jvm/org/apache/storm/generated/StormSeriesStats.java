/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.storm.generated;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class StormSeriesStats implements org.apache.thrift.TBase<StormSeriesStats, StormSeriesStats._Fields>, java.io.Serializable, Cloneable, Comparable<StormSeriesStats> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StormSeriesStats");

  private static final org.apache.thrift.protocol.TField TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("times", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("values", org.apache.thrift.protocol.TType.MAP, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StormSeriesStatsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StormSeriesStatsTupleSchemeFactory());
  }

  private List<Long> times; // optional
  private Map<String,Map<Long,Double>> values; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIMES((short)1, "times"),
    VALUES((short)2, "values");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIMES
          return TIMES;
        case 2: // VALUES
          return VALUES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.TIMES,_Fields.VALUES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIMES, new org.apache.thrift.meta_data.FieldMetaData("times", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.VALUES, new org.apache.thrift.meta_data.FieldMetaData("values", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StormSeriesStats.class, metaDataMap);
  }

  public StormSeriesStats() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StormSeriesStats(StormSeriesStats other) {
    if (other.is_set_times()) {
      List<Long> __this__times = new ArrayList<Long>(other.times);
      this.times = __this__times;
    }
    if (other.is_set_values()) {
      Map<String,Map<Long,Double>> __this__values = new HashMap<String,Map<Long,Double>>(other.values.size());
      for (Map.Entry<String, Map<Long,Double>> other_element : other.values.entrySet()) {

        String other_element_key = other_element.getKey();
        Map<Long,Double> other_element_value = other_element.getValue();

        String __this__values_copy_key = other_element_key;

        Map<Long,Double> __this__values_copy_value = new HashMap<Long,Double>(other_element_value);

        __this__values.put(__this__values_copy_key, __this__values_copy_value);
      }
      this.values = __this__values;
    }
  }

  public StormSeriesStats deepCopy() {
    return new StormSeriesStats(this);
  }

  @Override
  public void clear() {
    this.times = null;
    this.values = null;
  }

  public int get_times_size() {
    return (this.times == null) ? 0 : this.times.size();
  }

  public java.util.Iterator<Long> get_times_iterator() {
    return (this.times == null) ? null : this.times.iterator();
  }

  public void add_to_times(long elem) {
    if (this.times == null) {
      this.times = new ArrayList<Long>();
    }
    this.times.add(elem);
  }

  public List<Long> get_times() {
    return this.times;
  }

  public void set_times(List<Long> times) {
    this.times = times;
  }

  public void unset_times() {
    this.times = null;
  }

  /** Returns true if field times is set (has been assigned a value) and false otherwise */
  public boolean is_set_times() {
    return this.times != null;
  }

  public void set_times_isSet(boolean value) {
    if (!value) {
      this.times = null;
    }
  }

  public int get_values_size() {
    return (this.values == null) ? 0 : this.values.size();
  }

  public void put_to_values(String key, Map<Long,Double> val) {
    if (this.values == null) {
      this.values = new HashMap<String,Map<Long,Double>>();
    }
    this.values.put(key, val);
  }

  public Map<String,Map<Long,Double>> get_values() {
    return this.values;
  }

  public void set_values(Map<String,Map<Long,Double>> values) {
    this.values = values;
  }

  public void unset_values() {
    this.values = null;
  }

  /** Returns true if field values is set (has been assigned a value) and false otherwise */
  public boolean is_set_values() {
    return this.values != null;
  }

  public void set_values_isSet(boolean value) {
    if (!value) {
      this.values = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TIMES:
      if (value == null) {
        unset_times();
      } else {
        set_times((List<Long>)value);
      }
      break;

    case VALUES:
      if (value == null) {
        unset_values();
      } else {
        set_values((Map<String,Map<Long,Double>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TIMES:
      return get_times();

    case VALUES:
      return get_values();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TIMES:
      return is_set_times();
    case VALUES:
      return is_set_values();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StormSeriesStats)
      return this.equals((StormSeriesStats)that);
    return false;
  }

  public boolean equals(StormSeriesStats that) {
    if (that == null)
      return false;

    boolean this_present_times = true && this.is_set_times();
    boolean that_present_times = true && that.is_set_times();
    if (this_present_times || that_present_times) {
      if (!(this_present_times && that_present_times))
        return false;
      if (!this.times.equals(that.times))
        return false;
    }

    boolean this_present_values = true && this.is_set_values();
    boolean that_present_values = true && that.is_set_values();
    if (this_present_values || that_present_values) {
      if (!(this_present_values && that_present_values))
        return false;
      if (!this.values.equals(that.values))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_times = true && (is_set_times());
    list.add(present_times);
    if (present_times)
      list.add(times);

    boolean present_values = true && (is_set_values());
    list.add(present_values);
    if (present_values)
      list.add(values);

    return list.hashCode();
  }

  @Override
  public int compareTo(StormSeriesStats other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_times()).compareTo(other.is_set_times());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_times()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.times, other.times);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_values()).compareTo(other.is_set_values());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_values()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.values, other.values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StormSeriesStats(");
    boolean first = true;

    if (is_set_times()) {
      sb.append("times:");
      if (this.times == null) {
        sb.append("null");
      } else {
        sb.append(this.times);
      }
      first = false;
    }
    if (is_set_values()) {
      if (!first) sb.append(", ");
      sb.append("values:");
      if (this.values == null) {
        sb.append("null");
      } else {
        sb.append(this.values);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StormSeriesStatsStandardSchemeFactory implements SchemeFactory {
    public StormSeriesStatsStandardScheme getScheme() {
      return new StormSeriesStatsStandardScheme();
    }
  }

  private static class StormSeriesStatsStandardScheme extends StandardScheme<StormSeriesStats> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StormSeriesStats struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list880 = iprot.readListBegin();
                struct.times = new ArrayList<Long>(_list880.size);
                long _elem881;
                for (int _i882 = 0; _i882 < _list880.size; ++_i882)
                {
                  _elem881 = iprot.readI64();
                  struct.times.add(_elem881);
                }
                iprot.readListEnd();
              }
              struct.set_times_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map883 = iprot.readMapBegin();
                struct.values = new HashMap<String,Map<Long,Double>>(2*_map883.size);
                String _key884;
                Map<Long,Double> _val885;
                for (int _i886 = 0; _i886 < _map883.size; ++_i886)
                {
                  _key884 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TMap _map887 = iprot.readMapBegin();
                    _val885 = new HashMap<Long,Double>(2*_map887.size);
                    long _key888;
                    double _val889;
                    for (int _i890 = 0; _i890 < _map887.size; ++_i890)
                    {
                      _key888 = iprot.readI64();
                      _val889 = iprot.readDouble();
                      _val885.put(_key888, _val889);
                    }
                    iprot.readMapEnd();
                  }
                  struct.values.put(_key884, _val885);
                }
                iprot.readMapEnd();
              }
              struct.set_values_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StormSeriesStats struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.times != null) {
        if (struct.is_set_times()) {
          oprot.writeFieldBegin(TIMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.times.size()));
            for (long _iter891 : struct.times)
            {
              oprot.writeI64(_iter891);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.values != null) {
        if (struct.is_set_values()) {
          oprot.writeFieldBegin(VALUES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.values.size()));
            for (Map.Entry<String, Map<Long,Double>> _iter892 : struct.values.entrySet())
            {
              oprot.writeString(_iter892.getKey());
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.DOUBLE, _iter892.getValue().size()));
                for (Map.Entry<Long, Double> _iter893 : _iter892.getValue().entrySet())
                {
                  oprot.writeI64(_iter893.getKey());
                  oprot.writeDouble(_iter893.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StormSeriesStatsTupleSchemeFactory implements SchemeFactory {
    public StormSeriesStatsTupleScheme getScheme() {
      return new StormSeriesStatsTupleScheme();
    }
  }

  private static class StormSeriesStatsTupleScheme extends TupleScheme<StormSeriesStats> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StormSeriesStats struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.is_set_times()) {
        optionals.set(0);
      }
      if (struct.is_set_values()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.is_set_times()) {
        {
          oprot.writeI32(struct.times.size());
          for (long _iter894 : struct.times)
          {
            oprot.writeI64(_iter894);
          }
        }
      }
      if (struct.is_set_values()) {
        {
          oprot.writeI32(struct.values.size());
          for (Map.Entry<String, Map<Long,Double>> _iter895 : struct.values.entrySet())
          {
            oprot.writeString(_iter895.getKey());
            {
              oprot.writeI32(_iter895.getValue().size());
              for (Map.Entry<Long, Double> _iter896 : _iter895.getValue().entrySet())
              {
                oprot.writeI64(_iter896.getKey());
                oprot.writeDouble(_iter896.getValue());
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StormSeriesStats struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list897 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.times = new ArrayList<Long>(_list897.size);
          long _elem898;
          for (int _i899 = 0; _i899 < _list897.size; ++_i899)
          {
            _elem898 = iprot.readI64();
            struct.times.add(_elem898);
          }
        }
        struct.set_times_isSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map900 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.values = new HashMap<String,Map<Long,Double>>(2*_map900.size);
          String _key901;
          Map<Long,Double> _val902;
          for (int _i903 = 0; _i903 < _map900.size; ++_i903)
          {
            _key901 = iprot.readString();
            {
              org.apache.thrift.protocol.TMap _map904 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
              _val902 = new HashMap<Long,Double>(2*_map904.size);
              long _key905;
              double _val906;
              for (int _i907 = 0; _i907 < _map904.size; ++_i907)
              {
                _key905 = iprot.readI64();
                _val906 = iprot.readDouble();
                _val902.put(_key905, _val906);
              }
            }
            struct.values.put(_key901, _val902);
          }
        }
        struct.set_values_isSet(true);
      }
    }
  }

}

